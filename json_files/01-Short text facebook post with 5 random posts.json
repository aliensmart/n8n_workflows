{
  "name": "Short text facebook post with 5 random posts",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "e699be28-2897-495d-8ce1-2871fb1d117d",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -1120,
        224
      ],
      "webhookId": "1b847b63-7348-4e5d-bd2c-9c1dae8aa9a1",
      "credentials": {
        "telegramApi": {
          "id": "z3JFurXAjxXpjg4H",
          "name": "alien_social"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract the user message from Telegram and determine message type\nconst message = $input.item.json.message?.text || '';\nconst chatId = $input.item.json.message?.chat?.id;\nconst userId = $input.item.json.message?.from?.id;\nconst userName = $input.item.json.message?.from?.first_name || 'User';\n\n// Clean and normalize the message\nconst cleanMessage = message.toLowerCase().trim();\n\n// Determine message type: confirmation or content idea\nlet messageType = 'content_idea';\nlet confirmationAction = null;\n\n// Check for confirmation keywords\nif (['yes', 'oui', 'ok', 'confirm', 'confirmer', 'valider', 'y'].includes(cleanMessage)) {\n  messageType = 'confirmation';\n  confirmationAction = 'confirm';\n} else if (['no', 'non', 'cancel', 'annuler', 'n'].includes(cleanMessage)) {\n  messageType = 'confirmation';\n  confirmationAction = 'cancel';\n} else if (['retry', 'regenerate', 'refaire', 'recommencer', 'retry', 'r'].includes(cleanMessage)) {\n  messageType = 'confirmation';\n  confirmationAction = 'regenerate';\n} else if (cleanMessage.length < 5) {\n  // Very short messages are likely confirmations we didn't catch\n  messageType = 'unclear';\n}\n\n// Store message info\nreturn {\n  original_message: message,\n  user_prompt: message,\n  chat_id: chatId,\n  user_id: userId,\n  user_name: userName,\n  message_type: messageType,\n  confirmation_action: confirmationAction,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "42adfa30-d322-4c13-b461-ed93902d80c2",
      "name": "Extract Message & Route",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        224
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "message-type-condition",
              "leftValue": "={{ $json.message_type }}",
              "rightValue": "content_idea",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "34ba1685-5c35-40bb-8f5a-efcba5048f26",
      "name": "Route Message Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -720,
        48
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "Tu es un expert en création de contenu social media français. Tu dois créer EXACTEMENT 20 posts courts pour Facebook qui explorent DIFFÉRENTS ANGLES du même thème principal donné par l'utilisateur.\n\n🚨 RÈGLE ABSOLUE DE LONGUEUR - CHAQUE POST DOIT FAIRE MINIMUM 80 CARACTÈRES ! 🚨\n\nOBJECTIF : Générer 20 posts de 80-120 caractères pour que le système en sélectionne 5.\n\n❌ TROP COURT (à éviter) :\n❌ 50 caractères : \"Tes choix sont ta boussole.\" - TROP COURT !\n❌ 60 caractères : \"Un choix aujourd'hui, une conséquence demain.\" - TROP COURT !\n❌ 70 caractères : \"Choisir, c'est comme planter des graines pour demain.\" - ENCORE TROP COURT !\n\nSTRUCTURE OBLIGATOIRE POUR CHAQUE POST :\n🔢 COMPTE D'ABORD LES CARACTÈRES AVANT D'ÉCRIRE\n🔢 SI C'EST MOINS DE 80, AJOUTE DES MOTS\n🔢 VISE 90-110 CARACTÈRES POUR ÊTRE SÛR\n\nCONTRAINTES IMPORTANTES :\n1. Génère EXACTEMENT 20 posts (POST 1 à POST 20)\n2. Posts principaux : OBLIGATOIREMENT 80-120 caractères\n3. Commentaires : OBLIGATOIREMENT 3-8 phrases CONCRÈTES et ACTIONNABLES\n4. TOUS LES POSTS doivent être des VARIATIONS du même thème central\n5. Explore différents angles, métaphores, exemples du MÊME sujet\n6. Style varié : sarcasme, humour, profondeur, réflexion, provocateur\n7. Langue : Français uniquement - MOTS SIMPLES ET FACILES\n8. Posts AUTONOMES : chaque post doit être compréhensible sans le commentaire\n\n🚨 INTERDICTIONS ABSOLUES POUR LES COMMENTAIRES :\n❌ PAS de phrases comme \"Ce post nous invite à réfléchir\"\n❌ PAS de \"Cela nous encourage à\"\n❌ PAS de réflexions méta ou philosophiques vagues\n❌ PAS de \"Il est important de\"\n❌ PAS de généralités sans exemples concrets\n❌ PAS de \"Un jour, j'étais...\" ou \"Un jour, je...\"\n❌ PAS de \"Je me plaignais de...\" ou \"J'étais...\"\n❌ PAS de structure répétitive : histoire → réalisation → leçon\n❌ PAS de \"Ça m'a fait réfléchir\" ou \"J'ai réalisé que\"\n❌ PAS de \"Parfois, on...\" ou \"Quand tu...\"\n\n✅ STYLE DE COMMENTAIRES REQUIS - PARLE NATURELLEMENT :\n✅ Commence par des observations directes, pas des histoires\n✅ Utilise un vocabulaire simple et des phrases courtes\n✅ Donne des exemples concrets SANS raconter d'histoire personnelle\n✅ Parle comme si tu expliquais quelque chose à un ami au café\n✅ Varie complètement tes débuts de phrases\n✅ Évite les structures narratives (début-milieu-fin)\n✅ Reste factuel et pratique, pas émotionnel\n\nGUIDE DU TON PARFAIT :\n- Évite absolument les anecdotes personnelles répétitives\n- Parle comme quelqu'un qui donne un conseil pratique\n- Sois direct et concret, pas contemplatif\n- Utilise \"tu\" pour parler directement au lecteur\n- Évite les longues explications émotionnelles\n- Reste dans le présent, pas dans le passé narratif\n\nSTRUCTURE DE RÉPONSE (EXACTEMENT 20 POSTS) :\n```\n=== POST 1 ===\nPOST: [Phrase de 80-120 caractères EXACTEMENT - compte chaque caractère !]\nCOMMENTAIRE: [3-8 phrases CONCRÈTES avec exemples pratiques, anecdotes personnelles, conseils directs]\nTAGS: [3-5 hashtags simples]\n\n=== POST 2 ===\nPOST: [Phrase de 80-120 caractères EXACTEMENT - différent angle du même thème !]\nCOMMENTAIRE: [3-8 phrases CONCRÈTES avec exemples pratiques, anecdotes personnelles, conseils directs]\nTAGS: [3-5 hashtags simples]\n\n[... continue jusqu'à POST 20]\n```\n\n🚨 RAPPEL FINAL : \n- CHAQUE POST DOIT ABSOLUMENT FAIRE 80 CARACTÈRES MINIMUM !\n- CHAQUE COMMENTAIRE DOIT ÊTRE CONCRET, PAS PHILOSOPHIQUE !\n- TOUS les 20 posts doivent explorer le MÊME thème avec des ANGLES DIFFÉRENTS !",
              "role": "system"
            },
            {
              "content": "={{ $json.user_prompt }}"
            }
          ]
        },
        "options": {
          "maxTokens": 6000,
          "temperature": 0.8
        }
      },
      "id": "f131d325-9fe5-4222-8051-17caf3b464a1",
      "name": "AI Content Generator",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [
        -528,
        -16
      ],
      "credentials": {
        "openAiApi": {
          "id": "8F0Y4lHN8Axqwr3j",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse AI response and structure the content - GENERATE 20, SELECT TOP 5 ONLY\nlet aiResponse;\n\n// Debug: Log the raw response structure\nconsole.log('Raw AI Response:', JSON.stringify($input.item.json, null, 2));\n\n// Handle different LangChain response structures\nif ($input.item.json.message && $input.item.json.message.content) {\n  aiResponse = $input.item.json.message.content;\n} else if ($input.item.json.choices && $input.item.json.choices[0]) {\n  aiResponse = $input.item.json.choices[0].message.content;\n} else if ($input.item.json.text) {\n  aiResponse = $input.item.json.text;\n} else if ($input.item.json.content) {\n  aiResponse = $input.item.json.content;\n} else if (typeof $input.item.json === 'string') {\n  aiResponse = $input.item.json;\n} else {\n  aiResponse = JSON.stringify($input.item.json);\n}\n\nconsole.log('Extracted AI Response:', aiResponse);\n\nconst originalPrompt = $input.item.json.user_prompt || $('Extract Message & Route').item.json.user_prompt;\nconst chatId = $('Extract Message & Route').item.json.chat_id;\nconst userId = $('Extract Message & Route').item.json.user_id;\n\n// Extract posts using regex - handle different formats\nconst postPattern = /=== POST (\\d+) ===\\s*(?:POST:\\s*)?(.+?)\\s*COMMENTAIRE:\\s*(.+?)\\s*TAGS:\\s*(.+?)(?=\\s*===\\s*POST|$)/gs;\nconst allPosts = [];\nlet match;\n\nwhile ((match = postPattern.exec(aiResponse)) !== null) {\n  const content = match[2].trim();\n  const characterCount = content.length;\n  \n  // Strict validation (80-120 characters for quality)\n  const isValid = characterCount >= 80 && characterCount <= 120;\n  \n  allPosts.push({\n    post_number: parseInt(match[1]),\n    content: content,\n    comment: match[3].trim(),\n    tags: match[4].trim().split(/[,\\s#]+/).filter(tag => tag.length > 0).map(tag => tag.startsWith('#') ? tag : '#' + tag),\n    character_count: characterCount,\n    valid: isValid,\n    rejection_reason: isValid ? null : characterCount < 80 ? `trop court (manque ${80 - characterCount})` : `trop long (${characterCount - 120} en trop)`\n  });\n}\n\n// If regex fails, try alternative parsing\nif (allPosts.length === 0) {\n  console.log('Regex failed, trying alternative parsing...');\n  const lines = aiResponse.split('\\n').filter(line => line.trim());\n  let currentPost = null;\n  \n  lines.forEach((line, index) => {\n    console.log(`Line ${index}: ${line}`);\n    \n    if (line.includes('POST:') || (line.includes('POST') && line.includes('==='))) {\n      if (currentPost && currentPost.content) {\n        // Validate before adding\n        const characterCount = currentPost.content.length;\n        currentPost.character_count = characterCount;\n        currentPost.valid = characterCount >= 80 && characterCount <= 120;\n        currentPost.rejection_reason = currentPost.valid ? null : characterCount < 80 ? `trop court (manque ${80 - characterCount})` : `trop long (${characterCount - 120} en trop)`;\n        allPosts.push(currentPost);\n      }\n      currentPost = {\n        post_number: allPosts.length + 1,\n        content: line.replace(/POST:/i, '').replace(/===/g, '').trim(),\n        comment: '',\n        tags: []\n      };\n    } else if (line.includes('COMMENTAIRE:')) {\n      if (currentPost) currentPost.comment = line.replace(/COMMENTAIRE:/i, '').trim();\n    } else if (line.includes('TAGS:')) {\n      if (currentPost) {\n        currentPost.tags = line.replace(/TAGS:/i, '').trim().split(/[,\\s#]+/)\n          .filter(tag => tag.length > 0)\n          .map(tag => tag.startsWith('#') ? tag : '#' + tag);\n      }\n    } else if (currentPost && !currentPost.content && line.trim().length > 0) {\n      currentPost.content = line.trim();\n    }\n  });\n  \n  if (currentPost && currentPost.content) {\n    const characterCount = currentPost.content.length;\n    currentPost.character_count = characterCount;\n    currentPost.valid = characterCount >= 80 && characterCount <= 120;\n    currentPost.rejection_reason = currentPost.valid ? null : characterCount < 80 ? `trop court (manque ${80 - characterCount})` : `trop long (${characterCount - 120} en trop)`;\n    allPosts.push(currentPost);\n  }\n}\n\n// Filter valid posts\nconst validPosts = allPosts.filter(post => post.valid);\nconst invalidPosts = allPosts.filter(post => !post.valid);\n\nconsole.log(`🔍 FILTERING RESULTS:`);\nconsole.log(`Total generated: ${allPosts.length}`);\nconsole.log(`Valid posts: ${validPosts.length}`);\nconsole.log(`Invalid posts: ${invalidPosts.length}`);\n\n// FILTER OUT REFLECTIVE/META POSTS AND REPETITIVE PATTERNS\nconst naturalPosts = validPosts.filter(post => {\n  const comment = post.comment.toLowerCase();\n  \n  // Filter out reflection-style posts\n  const reflectionKeywords = [\n    'nous invite à réfléchir',\n    'nous encourage à',\n    'il est important de',\n    'cela nous permet de',\n    'nous pousse à',\n    'invite à la réflexion',\n    'nous amène à',\n    'nous rappelle que',\n    'nous fait prendre conscience',\n    'nous aide à comprendre'\n  ];\n  \n  // Filter out repetitive AI patterns and clichés\n  const repetitivePatterns = [\n    'mon père m\\'a toujours dit',\n    'l\\'autre jour, j\\'ai vu',\n    'l\\'autre jour, j\\'ai',\n    'il était une fois',\n    'permettez-moi de vous raconter',\n    'laissez-moi vous dire',\n    'voici une histoire que',\n    'je me souviens d\\'une fois'\n  ];\n  \n  const isReflective = reflectionKeywords.some(keyword => comment.includes(keyword));\n  const isRepetitive = repetitivePatterns.some(pattern => comment.includes(pattern));\n  \n  if (isReflective) {\n    console.log(`❌ FILTERED OUT reflective post: \"${post.content.substring(0, 50)}...\"`);\n    return false;\n  }\n  \n  if (isRepetitive) {\n    console.log(`❌ FILTERED OUT repetitive pattern post: \"${post.content.substring(0, 50)}...\"`);\n    return false;\n  }\n  \n  return true;\n});\n\nconsole.log(`📋 After natural conversation filter: ${naturalPosts.length} natural posts`);\n\n// STRICT TOP 5 SELECTION - ALWAYS 5 POSTS\nlet selectedPosts = [];\n\nif (naturalPosts.length >= 5) {\n  // Calculate quality score for each natural post\n  const scoredPosts = naturalPosts.map(post => {\n    // Quality scoring criteria:\n    // 1. Character count closer to 95 (ideal length)\n    // 2. Content directness (avoid vague language)\n    // 3. Tag variety\n    // 4. Comment quality (concrete vs abstract)\n    \n    const lengthScore = 100 - Math.abs(95 - post.character_count); // Higher = better\n    const contentDirectnessScore = post.content.includes('comme') ? 15 : 0; // Bonus for analogies/metaphors\n    const tagScore = post.tags.length >= 3 ? 10 : 0; // Bonus for good tagging\n    \n    // Comment quality score - favor natural, varied conversation\n    const comment = post.comment.toLowerCase();\n    let commentScore = 0;\n    \n    // Bonus for concrete situations without clichés\n    if (comment.includes('exemple') || comment.includes('situation') || comment.includes('cas')) {\n      commentScore += 15; // Bonus for concrete examples\n    }\n    \n    // Bonus for natural personal references (but not clichéd ones)\n    if ((comment.includes('mon') || comment.includes('ma') || comment.includes('mes')) && \n        !comment.includes('mon père m\\'a toujours dit')) {\n      commentScore += 10; // Bonus for natural personal stories\n    }\n    \n    // Bonus for actionable/practical content\n    if (comment.includes('conseil') || comment.includes('astuce') || comment.includes('technique') || \n        comment.includes('truc') || comment.includes('façon')) {\n      commentScore += 10; // Bonus for actionable advice\n    }\n    \n    // Bonus for natural conversation starters (varied beginnings)\n    const naturalStarters = ['quand', 'parfois', 'souvent', 'récemment', 'hier', 'maintenant'];\n    if (naturalStarters.some(starter => comment.includes(starter))) {\n      commentScore += 5; // Small bonus for varied beginnings\n    }\n    \n    // Penalty for AI-like formal language\n    const formalPhrases = ['il convient de', 'il s\\'avère que', 'force est de constater', 'en effet'];\n    if (formalPhrases.some(phrase => comment.includes(phrase))) {\n      commentScore -= 10; // Penalty for formal/AI language\n    }\n    \n    const totalScore = lengthScore + contentDirectnessScore + tagScore + commentScore;\n    \n    return {\n      ...post,\n      quality_score: totalScore\n    };\n  });\n  \n  // Sort by quality score (highest first) and take exactly 5\n  selectedPosts = scoredPosts\n    .sort((a, b) => b.quality_score - a.quality_score)\n    .slice(0, 5); // EXACTLY 5 POSTS ALWAYS\n  \n  console.log(`✅ SELECTED TOP 5 POSTS:`);\n  selectedPosts.forEach((post, index) => {\n    console.log(`${index + 1}. Score: ${post.quality_score} | Length: ${post.character_count} | Content: \"${post.content.substring(0, 50)}...\"`);\n  });\n\n} else if (naturalPosts.length > 0) {\n  // If we have fewer than 5 natural posts, take what we have and fill with best valid posts\n  console.log(`⚠️ Only ${naturalPosts.length} natural posts found. Supplementing with best valid posts.`);\n  \n  const remainingValid = validPosts.filter(post => !naturalPosts.includes(post));\n  const allAvailable = [...naturalPosts, ...remainingValid];\n  \n  selectedPosts = allAvailable\n    .slice(0, 5); // Take exactly 5 regardless\n    \n  console.log(`✅ SELECTED 5 POSTS (${naturalPosts.length} natural + ${5 - naturalPosts.length} backup):`);\n  selectedPosts.forEach((post, index) => {\n    const isNatural = naturalPosts.includes(post);\n    console.log(`${index + 1}. ${isNatural ? '✅' : '⚠️'} Length: ${post.character_count} | Content: \"${post.content.substring(0, 50)}...\"`);\n  });\n\n} else if (validPosts.length >= 5) {\n  // Last resort: take 5 best valid posts even if they're reflective\n  console.log(`⚠️ No actionable posts found. Taking 5 best valid posts.`);\n  selectedPosts = validPosts.slice(0, 5);\n  \n} else {\n  // Emergency: not enough posts, regeneration needed\n  console.log(`❌ INSUFFICIENT POSTS: Only ${validPosts.length} valid posts found. Need regeneration.`);\n  selectedPosts = validPosts; // Take whatever we have, but flag for regeneration\n}\n\n// Generate preview for Telegram (ALWAYS show exactly 5 posts)\nlet preview = `🎯 CONTENU GÉNÉRÉ - TOP 5 SÉLECTIONNÉS (80-120 caractères)\\n`;\npreview += `📊 Stats: ${allPosts.length} générés | ${validPosts.length} valides | ${naturalPosts.length} naturels | ${selectedPosts.length} sélectionnés\\n\\n`;\n\nif (selectedPosts.length >= 5) {\n  selectedPosts.slice(0, 5).forEach((post, index) => {\n    const qualityIndicator = post.quality_score ? `Score: ${post.quality_score}` : 'Backup';\n    preview += `📝 POST ${index + 1} (${post.character_count} car. | ${qualityIndicator}):\\n`;\n    preview += `\"${post.content}\"\\n\\n`;\n    preview += `💬 ${post.comment}\\n\\n`;\n    preview += `🏷️ ${post.tags.join(' ')}\\n\\n⸻\\n\\n`;\n  });\n  \n  preview += `✅ POUR CONFIRMER: Écris \"yes\" ou \"oui\"\\n`;\n  preview += `❌ POUR ANNULER: Écris \"no\" ou \"cancel\"\\n`;\n  preview += `🔄 POUR RÉGÉNÉRER: Écris \"retry\" ou \"refaire\"`;\n\n} else if (selectedPosts.length > 0) {\n  preview += `⚠️ ATTENTION: Seulement ${selectedPosts.length} posts de qualité trouvés (besoin de 5):\\n\\n`;\n  selectedPosts.forEach((post, index) => {\n    preview += `📝 POST ${index + 1} (${post.character_count} car.):\\n`;\n    preview += `\"${post.content}\"\\n\\n`;\n    preview += `💬 ${post.comment}\\n\\n`;\n    preview += `🏷️ ${post.tags.join(' ')}\\n\\n⸻\\n\\n`;\n  });\n  \n  preview += `🔄 RÉGÉNÉRATION RECOMMANDÉE: Écris \"retry\" pour avoir 5 posts complets\\n`;\n  preview += `⚠️ CONFIRMER QUAND MÊME: Écris \"yes\" (seulement ${selectedPosts.length} posts)\\n`;\n  preview += `❌ POUR ANNULER: Écris \"no\" ou \"cancel\"`;\n\n} else {\n  preview += `❌ ÉCHEC: Aucun post de qualité trouvé.\\n`;\n  preview += `📝 Problèmes détectés:\\n`;\n  preview += `- Posts générés: ${allPosts.length}\\n`;\n  preview += `- Posts valides (80-120 chars): ${validPosts.length}\\n`;\n  preview += `- Posts naturels (non-répétitifs): ${naturalPosts.length}\\n\\n`;\n  preview += `🔄 RÉGÉNÉRATION OBLIGATOIRE: Écris \"retry\" avec un prompt plus spécifique`;\n}\n\n// Log invalid posts for debugging\nif (invalidPosts.length > 0) {\n  console.log('❌ INVALID POSTS:');\n  invalidPosts.forEach((post, index) => {\n    console.log(`${index + 1}. ${post.character_count} chars: \"${post.content.substring(0, 50)}...\" - ${post.rejection_reason}`);\n  });\n}\n\n// Store data - ALWAYS try to provide exactly 5 posts\nconst finalPosts = selectedPosts.length >= 5 ? selectedPosts.slice(0, 5) : selectedPosts;\n\nconst postsData = {\n  original_prompt: originalPrompt,\n  posts: finalPosts, // Exactly 5 posts (or whatever we managed to get)\n  chat_id: chatId,\n  user_id: userId,\n  generation_timestamp: new Date().toISOString()\n};\n\n// Log final summary\nconsole.log(`🎯 FINAL RESULT: ${finalPosts.length} posts selected`);\nif (finalPosts.length < 5) {\n  console.log(`⚠️ WARNING: Only ${finalPosts.length} posts instead of 5. Recommend regeneration.`);\n}\n\nreturn {\n  original_prompt: originalPrompt,\n  ai_response: aiResponse,\n  posts: finalPosts, // EXACTLY the selected posts\n  all_generated_posts: allPosts,\n  valid_posts: validPosts,\n  natural_posts: naturalPosts, // Add natural posts for debugging\n  invalid_posts: invalidPosts,\n  posts_count: finalPosts.length,\n  total_generated: allPosts.length,\n  needs_regeneration: finalPosts.length < 5, // Flag for insufficient posts\n  selection_stats: {\n    generated: allPosts.length,\n    valid: validPosts.length,\n    natural: naturalPosts.length,\n    selected: finalPosts.length,\n    rejected: invalidPosts.length,\n    validation_criteria: '80-120 caractères + naturel + non-répétitif'\n  },\n  preview_message: preview,\n  chat_id: chatId,\n  user_id: userId,\n  generation_timestamp: new Date().toISOString(),\n  posts_data: postsData\n};"
      },
      "id": "ea82722a-3e0f-4e2d-8dde-0a87bc50c263",
      "name": "Parse AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        0
      ]
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Staging",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $json.chat_id.toString() }}",
            "user_id": "={{ $json.user_id }}",
            "original_prompt": "={{ $json.original_prompt }}",
            "posts_json": "={{ JSON.stringify($json.posts) }}",
            "generation_timestamp": "={{ $json.generation_timestamp }}",
            "status": "pending_confirmation",
            "ai_response": "={{ $json.ai_response }}",
            "posts": "={{ JSON.stringify($json.posts) }}",
            "all_generated_posts": "={{ JSON.stringify($json.all_generated_posts) }}",
            "valid_posts": "={{ JSON.stringify($json.valid_posts) }}",
            "invalid_posts": "={{ JSON.stringify($json.invalid_posts) }}",
            "posts_count": "={{ $json.posts_count }}",
            "total_generated": "={{ $json.total_generated }}",
            "selection_stats": "={{ JSON.stringify($json.selection_stats) }}",
            "preview_message": "={{ $json.preview_message }}",
            "posts_data": "={{ JSON.stringify($json.posts_data) }}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "original_prompt",
              "displayName": "original_prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "posts_json",
              "displayName": "posts_json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "generation_timestamp",
              "displayName": "generation_timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ai_response",
              "displayName": "ai_response",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "posts",
              "displayName": "posts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "all_generated_posts",
              "displayName": "all_generated_posts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "valid_posts",
              "displayName": "valid_posts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "invalid_posts",
              "displayName": "invalid_posts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "posts_count",
              "displayName": "posts_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total_generated",
              "displayName": "total_generated",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "selection_stats",
              "displayName": "selection_stats",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "preview_message",
              "displayName": "preview_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "posts_data",
              "displayName": "posts_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "dc47e41b-6ba9-4cb9-9b5d-e24fcc6f1c2a",
      "name": "Store Staging Data",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        336,
        16
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "khPKXm7h55a6o2W3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.preview_message }}",
        "additionalFields": {}
      },
      "id": "a417c6b7-5ea2-43d3-820b-d3db3d037848",
      "name": "Send Preview to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        720,
        16
      ],
      "webhookId": "1e525977-8686-4251-ad99-cc203933bd37",
      "credentials": {
        "telegramApi": {
          "id": "z3JFurXAjxXpjg4H",
          "name": "alien_social"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Staging",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8/edit#gid=0"
        },
        "options": {}
      },
      "id": "367a91b3-0899-492c-ad5c-65562a55b172",
      "name": "Get Staging Data",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        -768,
        384
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "khPKXm7h55a6o2W3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "confirmation-condition",
              "leftValue": "={{ $json.message_type }}",
              "rightValue": "confirmation",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ef76c1d4-8fac-47e5-bc1e-467fe0c8d104",
      "name": "Check If Confirmation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -64,
        352
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "chat-id-match",
              "leftValue": "={{ $json.chat_id.toString() }}",
              "rightValue": "={{ $('Extract Message & Route').item.json.chat_id.toString() }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f8449228-9347-4bf6-a049-44e81e846a39",
      "name": "Filter Staging Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -304,
        384
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Process confirmation response using filtered Google Sheets staging data\nconst chatId = $('Extract Message & Route').item.json.chat_id;\nconst userId = $('Extract Message & Route').item.json.user_id;\nconst action = $('Extract Message & Route').item.json.confirmation_action;\n\nconsole.log('Processing confirmation:', { chatId, userId, action });\n\n// Get staging data from Google Sheets (already filtered for this chat_id)\nconst stagingData = $input.item.json;\nconsole.log('Staging data received:', Object.keys(stagingData));\n\n// Debug: Log all potential posts fields\nconsole.log('=== DEBUGGING POSTS DATA ===');\nconsole.log('posts_json:', stagingData.posts_json);\nconsole.log('posts (SELECTED):', stagingData.posts);\nconsole.log('valid_posts (ALL VALID):', stagingData.valid_posts);\nconsole.log('posts_data:', stagingData.posts_data);\nconsole.log('ai_response (first 200 chars):', stagingData.ai_response ? stagingData.ai_response.substring(0, 200) : 'none');\nconsole.log('================================');\n\nlet postsData = null;\nlet posts = [];\n\ntry {\n  // Method 1: Try posts field directly (THE SELECTED/FILTERED POSTS - PRIORITY!)\n  if (stagingData.posts && stagingData.posts !== '[]' && stagingData.posts !== '') {\n    console.log('Method 1: Trying posts field (SELECTED POSTS)');\n    try {\n      posts = typeof stagingData.posts === 'string' \n        ? JSON.parse(stagingData.posts) \n        : stagingData.posts;\n      console.log('✅ Success with posts (SELECTED):', posts.length, 'posts');\n    } catch (error) {\n      console.log('❌ Failed to parse posts:', error.message);\n    }\n  }\n\n  // Method 2: Try posts_json field (backup)\n  if (posts.length === 0 && stagingData.posts_json && stagingData.posts_json !== '[]' && stagingData.posts_json !== '') {\n    console.log('Method 2: Trying posts_json');\n    try {\n      posts = JSON.parse(stagingData.posts_json);\n      console.log('✅ Success with posts_json:', posts.length, 'posts');\n    } catch (error) {\n      console.log('❌ Failed to parse posts_json:', error.message);\n    }\n  }\n  \n  // Method 3: Try posts_data field (backup)\n  if (posts.length === 0 && stagingData.posts_data && stagingData.posts_data !== '[]' && stagingData.posts_data !== '') {\n    console.log('Method 3: Trying posts_data');\n    try {\n      const postsDataParsed = typeof stagingData.posts_data === 'string' \n        ? JSON.parse(stagingData.posts_data) \n        : stagingData.posts_data;\n      \n      if (postsDataParsed && postsDataParsed.posts) {\n        posts = postsDataParsed.posts;\n        console.log('✅ Success with posts_data:', posts.length, 'posts');\n      }\n    } catch (error) {\n      console.log('❌ Failed to parse posts_data:', error.message);\n    }\n  }\n  \n  // Method 4: Try valid_posts field (WARNING: THIS HAS ALL POSTS, NOT JUST SELECTED!)\n  if (posts.length === 0 && stagingData.valid_posts && stagingData.valid_posts !== '[]' && stagingData.valid_posts !== '') {\n    console.log('Method 4: Trying valid_posts (WARNING: ALL VALID POSTS, NOT FILTERED)');\n    try {\n      const allValidPosts = typeof stagingData.valid_posts === 'string' \n        ? JSON.parse(stagingData.valid_posts) \n        : stagingData.valid_posts;\n      \n      // Take only the first 5 posts to limit the selection\n      posts = allValidPosts.slice(0, 5);\n      console.log('⚠️ Success with valid_posts (LIMITED TO 5):', posts.length, 'posts out of', allValidPosts.length, 'total');\n    } catch (error) {\n      console.log('❌ Failed to parse valid_posts:', error.message);\n    }\n  }\n  \n  // Method 5: Last resort - try to extract from ai_response\n  if (posts.length === 0 && stagingData.ai_response) {\n    console.log('Method 5: Trying to extract from ai_response');\n    try {\n      // Simple regex to find POST sections in ai_response\n      const postPattern = /=== POST (\\d+) ===\\s*(?:POST:\\s*)?(.+?)\\s*COMMENTAIRE:\\s*(.+?)\\s*TAGS:\\s*(.+?)(?=\\s*===\\s*POST|$)/gs;\n      const extractedPosts = [];\n      let match;\n      \n      while ((match = postPattern.exec(stagingData.ai_response)) !== null) {\n        extractedPosts.push({\n          post_number: parseInt(match[1]),\n          content: match[2].trim(),\n          comment: match[3].trim(),\n          tags: match[4].trim().split(/[,\\s#]+/).filter(tag => tag.length > 0).map(tag => tag.startsWith('#') ? tag : '#' + tag),\n          character_count: match[2].trim().length,\n          valid: true\n        });\n      }\n      \n      if (extractedPosts.length > 0) {\n        // Take only the first 5 from extracted posts\n        posts = extractedPosts.slice(0, 5);\n        console.log('✅ Success extracting from ai_response (LIMITED TO 5):', posts.length, 'posts out of', extractedPosts.length, 'extracted');\n      }\n    } catch (error) {\n      console.log('❌ Failed to extract from ai_response:', error.message);\n    }\n  }\n  \n  // If we found posts, create postsData\n  if (posts && posts.length > 0) {\n    postsData = {\n      original_prompt: stagingData.original_prompt || '',\n      posts: posts,\n      chat_id: stagingData.chat_id,\n      user_id: stagingData.user_id,\n      generation_timestamp: stagingData.generation_timestamp\n    };\n    \n    console.log('✅ Found posts data:', {\n      postsCount: posts.length,\n      originalPrompt: stagingData.original_prompt ? stagingData.original_prompt.substring(0, 50) : 'none',\n      samplePost: posts[0] ? posts[0].content?.substring(0, 50) : 'none'\n    });\n  }\n  \n} catch (error) {\n  console.log('❌ Error in processing:', error.message);\n}\n\n// If no posts data found, return helpful error\nif (!postsData || !postsData.posts || postsData.posts.length === 0) {\n  console.log('❌ No posts data found for chat:', chatId);\n  console.log('Available fields:', Object.keys(stagingData));\n  \n  return {\n    action: action,\n    chat_id: chatId,\n    user_id: userId,\n    posts: [],\n    original_prompt: stagingData.original_prompt || '',\n    error: 'no_posts_data',\n    error_message: 'Aucune donnée de posts trouvée. Pour utiliser la confirmation, vous devez d\\'abord:\\n\\n1️⃣ Envoyer une idée de contenu\\n2️⃣ Attendre la génération des posts\\n3️⃣ Puis répondre \"yes\", \"no\" ou \"retry\"\\n\\n🔄 Veuillez recommencer en envoyant une nouvelle idée de contenu.',\n    action_timestamp: new Date().toISOString(),\n    debug_info: {\n      available_fields: Object.keys(stagingData),\n      posts_json_type: typeof stagingData.posts_json,\n      posts_json_content: stagingData.posts_json,\n      valid_posts_type: typeof stagingData.valid_posts,\n      posts_type: typeof stagingData.posts\n    }\n  };\n}\n\nreturn {\n  action: action,\n  chat_id: chatId,\n  user_id: userId,\n  posts: postsData.posts || [],\n  original_prompt: postsData.original_prompt || '',\n  staging_chat_id: stagingData.chat_id, // Keep this for cleanup\n  action_timestamp: new Date().toISOString()\n};"
      },
      "id": "31ec2ac0-69bd-4c7f-827d-3e8b91e67b5b",
      "name": "Process Confirmation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -352,
        208
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "confirm-action-condition",
              "leftValue": "={{ $json.action }}",
              "rightValue": "confirm",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            },
            {
              "id": "no-error-condition",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ad17a65d-b207-4ec7-af83-4f6cf2f3c64a",
      "name": "Route Confirmation Action",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        160,
        208
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Generate random posting schedule - NO SAME THEME PER DAY + NEXT WEEK\nconsole.log('=== GENERATE SCHEDULE DEBUG ===');\nconsole.log('Full input data:', JSON.stringify($input.item.json, null, 2));\n\nconst inputData = $input.item.json;\nlet posts = inputData.posts || [];\n\nconsole.log('Input data keys:', Object.keys(inputData));\nconsole.log('Posts array found:', posts);\nconsole.log('Posts length:', posts ? posts.length : 'undefined');\nconsole.log('Sample post structure:', posts[0] ? Object.keys(posts[0]) : 'no posts');\n\n// If posts is empty, try alternative paths\nif (!posts || posts.length === 0) {\n  console.log('Posts array is empty, checking alternative paths...');\n  \n  // Try different possible locations for posts data\n  if (inputData.postsData && inputData.postsData.posts) {\n    posts = inputData.postsData.posts;\n    console.log('Found posts in postsData.posts');\n  } else if (inputData.posts_data && inputData.posts_data.posts) {\n    posts = inputData.posts_data.posts;\n    console.log('Found posts in posts_data.posts');\n  } else if (typeof inputData.posts === 'string') {\n    try {\n      posts = JSON.parse(inputData.posts);\n      console.log('Parsed posts from string');\n    } catch (e) {\n      console.log('Failed to parse posts string:', e.message);\n    }\n  }\n}\n\nconsole.log('Final posts array:', posts);\nconsole.log('Final posts count:', posts ? posts.length : 'undefined');\n\nconst now = new Date();\nconst scheduledPosts = [];\n\n// Helper function to get random hour between optimal ranges\nfunction getRandomHour() {\n  const morningHours = [7, 8, 9, 10];      // Morning engagement\n  const lunchHours = [12, 13, 14];         // Lunch break\n  const afternoonHours = [15, 16, 17];     // Afternoon break\n  const eveningHours = [18, 19, 20, 21];   // Evening engagement\n  \n  const allHours = [...morningHours, ...lunchHours, ...afternoonHours, ...eveningHours];\n  return allHours[Math.floor(Math.random() * allHours.length)];\n}\n\n// Helper function to get random future date (1-14 days = next 2 weeks)\nfunction getRandomFutureDate() {\n  const futureDate = new Date(now);\n  // Extended range: 1-14 days (covers this week + next week)\n  futureDate.setDate(now.getDate() + Math.floor(Math.random() * 14) + 1);\n  return futureDate;\n}\n\n// Helper function to get date string (YYYY-MM-DD) for comparison\nfunction getDateString(date) {\n  return date.toISOString().split('T')[0];\n}\n\n// Helper function to extract theme/topic from post content\nfunction extractTheme(post) {\n  const content = post.content || '';\n  const originalPrompt = inputData.original_prompt || '';\n  \n  // Use the original prompt as base theme\n  let theme = originalPrompt.substring(0, 50).toLowerCase();\n  \n  // Extract key theme words from content for more specific theming\n  const themeKeywords = [\n    'amour', 'love', 'relationship',\n    'motivation', 'success', 'réussite',\n    'argent', 'money', 'finance', 'business',\n    'santé', 'health', 'wellness',\n    'famille', 'family', 'enfant',\n    'travail', 'work', 'career', 'carriere',\n    'bonheur', 'happiness', 'joie',\n    'stress', 'anxiété', 'mental',\n    'voyage', 'travel', 'aventure',\n    'sport', 'fitness', 'exercise',\n    'choix', 'decision', 'décision'\n  ];\n  \n  for (const keyword of themeKeywords) {\n    if (content.toLowerCase().includes(keyword) || originalPrompt.toLowerCase().includes(keyword)) {\n      theme = keyword;\n      break;\n    }\n  }\n  \n  return theme;\n}\n\n// If no posts, return error\nif (!posts || posts.length === 0) {\n  console.log('❌ No posts found after all attempts');\n  console.log('Available input fields:', Object.keys(inputData));\n  throw new Error('Aucun post trouvé pour la programmation. Données reçues: ' + JSON.stringify(inputData, null, 2));\n}\n\nconsole.log('✅ Processing', posts.length, 'posts for scheduling');\n\n// Track used dates per theme to avoid conflicts\nconst usedDatesPerTheme = {};\nconst usedDatesGlobal = new Set();\n\nposts.forEach((post, index) => {\n  const theme = extractTheme(post);\n  \n  // Initialize theme tracking if needed\n  if (!usedDatesPerTheme[theme]) {\n    usedDatesPerTheme[theme] = new Set();\n  }\n  \n  let postDate;\n  let dateString;\n  let attempts = 0;\n  const maxAttempts = 50; // Prevent infinite loops\n  \n  // Find a date that doesn't conflict with the same theme\n  do {\n    postDate = getRandomFutureDate();\n    dateString = getDateString(postDate);\n    attempts++;\n    \n    // If we can't find a unique date for this theme, allow some overlap but spread it out\n    if (attempts > maxAttempts) {\n      console.log(`Warning: Could not find unique date for theme \"${theme}\" after ${maxAttempts} attempts`);\n      break;\n    }\n  } while (usedDatesPerTheme[theme].has(dateString) && attempts < maxAttempts);\n  \n  // Set the time\n  postDate.setHours(getRandomHour(), Math.floor(Math.random() * 60), 0, 0);\n  \n  // Mark this date as used for this theme\n  usedDatesPerTheme[theme].add(dateString);\n  usedDatesGlobal.add(dateString);\n  \n  // Generate unique ID\n  const generateId = () => {\n    return 'POST_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9) + '_' + index;\n  };\n\n  const scheduledPost = {\n    id: generateId(),\n    is_posted: false,\n    posted_on: null,\n    scheduled_for: postDate.toISOString(),\n    content: post.content || '',\n    comment: post.comment || '',\n    tags: Array.isArray(post.tags) ? post.tags.join(',') : (post.tags || ''),\n    media: null,\n    to_post_on: 'Facebook',\n    content_type: 'Background Post',\n    engagement_score: null,\n    created_by: inputData.user_id || 'unknown',\n    created_at: now.toISOString(),\n    last_updated: now.toISOString(),\n    status: 'scheduled',\n    topic: theme, // Use the extracted theme\n    character_count: post.content ? post.content.length : 0,\n    priority: Math.floor(Math.random() * 3) + 1,\n    target_audience: 'General',\n    call_to_action: 'Engage',\n    post_category: 'Motivational',\n    // Additional fields for better tracking\n    theme: theme,\n    original_prompt: inputData.original_prompt || '',\n    scheduled_date: dateString,\n    original_post_number: post.post_number || index + 1\n  };\n\n  scheduledPosts.push(scheduledPost);\n  \n  console.log(`📅 Post ${index + 1} - Theme: \"${theme}\" scheduled for ${dateString} at ${postDate.getHours()}:${postDate.getMinutes().toString().padStart(2, '0')}`);\n});\n\n// Sort posts by scheduled date for better organization\nscheduledPosts.sort((a, b) => new Date(a.scheduled_for) - new Date(b.scheduled_for));\n\n// Log scheduling summary\nconsole.log('📊 Scheduling Summary:');\nconsole.log(`Total posts scheduled: ${scheduledPosts.length}`);\nconsole.log(`Date range: ${Math.min(...Array.from(usedDatesGlobal))} to ${Math.max(...Array.from(usedDatesGlobal))}`);\nconsole.log('Themes distribution:', Object.keys(usedDatesPerTheme).map(theme => `${theme}: ${usedDatesPerTheme[theme].size} days`));\n\nconsole.log('✅ Returning scheduled posts data');\nconsole.log('Sample scheduled post:', scheduledPosts[0] ? Object.keys(scheduledPosts[0]) : 'none');\n\nreturn {\n  scheduled_posts: scheduledPosts,\n  total_posts: scheduledPosts.length,\n  chat_id: inputData.chat_id,\n  user_id: inputData.user_id,\n  original_prompt: inputData.original_prompt,\n  scheduling_summary: {\n    themes_used: Object.keys(usedDatesPerTheme),\n    dates_used: Array.from(usedDatesGlobal).sort(),\n    date_range_days: 14,\n    theme_distribution: Object.fromEntries(\n      Object.entries(usedDatesPerTheme).map(([theme, dates]) => [theme, dates.size])\n    )\n  }\n};"
      },
      "id": "a2d9fbb7-2dca-4146-8303-5ed66e10b42a",
      "name": "Generate Post Schedule",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        336,
        384
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "scheduled_posts",
        "options": {}
      },
      "id": "b4e8c010-d3a1-423d-90fb-385b6580570f",
      "name": "Split Posts Array",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 3,
      "position": [
        576,
        384
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 990722625,
          "mode": "list",
          "cachedResultName": "Posts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8/edit#gid=990722625"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "is_posted": "={{ $json.is_posted }}",
            "posted_on": "={{ $json.posted_on }}",
            "scheduled_for": "={{ $json.scheduled_for }}",
            "content": "={{ $json.content }}",
            "comment": "={{ $json.comment }}",
            "tags": "={{ $json.tags }}",
            "media": "={{ $json.media }}",
            "to_post_on": "={{ $json.to_post_on }}",
            "content_type": "={{ $json.content_type }}",
            "engagement_score": "={{ $json.engagement_score }}",
            "created_by": "={{ $json.created_by }}",
            "created_at": "={{ $json.created_at }}",
            "last_updated": "={{ $json.last_updated }}",
            "status": "={{ $json.status }}",
            "topic": "={{ $json.topic }}",
            "character_count": "={{ $json.character_count }}",
            "priority": "={{ $json.priority }}",
            "target_audience": "={{ $json.target_audience }}",
            "call_to_action": "={{ $json.call_to_action }}",
            "post_category": "={{ $json.post_category }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "is_posted",
              "displayName": "is_posted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "posted_on",
              "displayName": "posted_on",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "scheduled_for",
              "displayName": "scheduled_for",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "comment",
              "displayName": "comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "tags",
              "displayName": "tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "media",
              "displayName": "media",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "to_post_on",
              "displayName": "to_post_on",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "content_type",
              "displayName": "content_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "engagement_score",
              "displayName": "engagement_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_by",
              "displayName": "created_by",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "last_updated",
              "displayName": "last_updated",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "topic",
              "displayName": "topic",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "character_count",
              "displayName": "character_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "priority",
              "displayName": "priority",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "target_audience",
              "displayName": "target_audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "call_to_action",
              "displayName": "call_to_action",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "post_category",
              "displayName": "post_category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "2ceaf4f3-e567-4f56-9489-ac2b60c55226",
      "name": "Add to Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        816,
        384
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "khPKXm7h55a6o2W3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Staging",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ibJ_ajHvEo9YpNel2zqOmluvLR5fODaJh4hIZIGmzg8/edit#gid=0"
        }
      },
      "id": "e860ab6e-4201-4704-b07d-ce3205f2ce17",
      "name": "Cleanup Staging Data",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        1056,
        384
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "khPKXm7h55a6o2W3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Process Confirmation').item.json.chat_id }}",
        "text": "✅ Parfait ! Les posts ont été ajoutés au Google Sheet avec une programmation aléatoire.  📊 Les posts seront publiés de manière espacée sur les prochains jours aux heures optimales.  🔄 Tu peux maintenant créer d'autres contenus en envoyant une nouvelle idée !",
        "additionalFields": {}
      },
      "id": "89a0b210-7c4a-4ee7-9941-f5489ec81054",
      "name": "Confirmation Success Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1296,
        384
      ],
      "webhookId": "888e1944-aded-4360-afd8-24859c64e954",
      "credentials": {
        "telegramApi": {
          "id": "z3JFurXAjxXpjg4H",
          "name": "alien_social"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "❌ Opération annulée. Tu peux recommencer avec un nouveau prompt quand tu veux !",
        "additionalFields": {}
      },
      "id": "1a5bfd40-0815-4ee9-91d4-7c08767bcc2a",
      "name": "Cancel Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        352,
        768
      ],
      "webhookId": "b71d10a9-4ddf-40db-9e14-040e2c958ea6",
      "credentials": {
        "telegramApi": {
          "id": "z3JFurXAjxXpjg4H",
          "name": "alien_social"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.error_message }}",
        "additionalFields": {}
      },
      "id": "73bfccc0-761e-4af0-a4d4-e396e55e25c7",
      "name": "No Posts Error Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        368,
        912
      ],
      "webhookId": "no-posts-error-webhook-id",
      "credentials": {
        "telegramApi": {
          "id": "z3JFurXAjxXpjg4H",
          "name": "alien_social"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "🔄 Régénération demandée. Veuillez envoyer un nouveau prompt pour créer de nouveaux posts !",
        "additionalFields": {}
      },
      "id": "341cb856-c5ee-44ed-859c-d00c29db0e9d",
      "name": "Regenerate Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        640,
        576
      ],
      "webhookId": "regenerate-webhook-id",
      "credentials": {
        "telegramApi": {
          "id": "z3JFurXAjxXpjg4H",
          "name": "alien_social"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "error-check-condition",
              "leftValue": "={{ $json.error }}",
              "rightValue": "no_posts_data",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "851426f0-1f71-4f44-9cc1-be8b1fbfac38",
      "name": "Check For Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        32,
        944
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "regenerate-condition",
              "leftValue": "={{ $json.action }}",
              "rightValue": "regenerate",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "409ae63a-e729-4dfd-8f7b-b54d2e9f8a28",
      "name": "Check Regenerate",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        352,
        592
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "❓ Je n'ai pas compris votre réponse. \\n\\nSi vous voulez :\\n✅ Confirmer les posts: tapez \"yes\" ou \"oui\"\\n❌ Annuler: tapez \"no\" ou \"cancel\"\\n🔄 Régénérer: tapez \"retry\" ou \"refaire\"\\n\\nOu envoyez une nouvelle idée de contenu pour commencer.",
        "additionalFields": {}
      },
      "id": "407d9e39-bb14-46b2-a46b-327baba47c83",
      "name": "Unclear Message Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -256,
        720
      ],
      "webhookId": "unclear-webhook-id",
      "credentials": {
        "telegramApi": {
          "id": "z3JFurXAjxXpjg4H",
          "name": "alien_social"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Extract Message & Route",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message & Route": {
      "main": [
        [
          {
            "node": "Route Message Type",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check If Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Message Type": {
      "main": [
        [
          {
            "node": "AI Content Generator",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unclear Message Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Content Generator": {
      "main": [
        [
          {
            "node": "Parse AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Response": {
      "main": [
        [
          {
            "node": "Store Staging Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Staging Data": {
      "main": [
        [
          {
            "node": "Send Preview to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Confirmation": {
      "main": [
        [
          {
            "node": "Get Staging Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Staging Data": {
      "main": [
        [
          {
            "node": "Filter Staging Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Staging Data": {
      "main": [
        [
          {
            "node": "Process Confirmation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Posts Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Confirmation": {
      "main": [
        [
          {
            "node": "Route Confirmation Action",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Regenerate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check For Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Confirmation Action": {
      "main": [
        [
          {
            "node": "Generate Post Schedule",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Cancel Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Post Schedule": {
      "main": [
        [
          {
            "node": "Split Posts Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Posts Array": {
      "main": [
        [
          {
            "node": "Add to Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Google Sheet": {
      "main": [
        [
          {
            "node": "Cleanup Staging Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup Staging Data": {
      "main": [
        [
          {
            "node": "Confirmation Success Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Regenerate": {
      "main": [
        [
          {
            "node": "Regenerate Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check For Error": {
      "main": [
        [
          {
            "node": "No Posts Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ad66a321-fe2b-46fe-8b52-a56ff0e54b27",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a5e53a92e51c9979ed74d5ae90bc70ccf22454dbdfdc88327bf8a25907a2eadf"
  },
  "id": "svglMLC4i6NVZ8G3",
  "tags": []
}